test_schema_output

[ec2-user@ip-172-31-31-230 ~]$ composedb graphql:schema models/counter_runtime_composi
te.json                  
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  counterIndex(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): CounterConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount implements Node {
  """Globally unique identifier of the account (DID string)"""
  id: ID!

  """
  Whether the Ceramic instance is currently authenticated with this account or not
  """
  isViewer: Boolean!
  counter: Counter
}

type Counter implements Node {
  id: ID!
  count: Int!
}

"""A connection to a list of items."""
type CounterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CounterEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type CounterEdge {
  """The item at the end of the edge"""
  node: Counter

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createCounter(input: CreateCounterInput!): CreateCounterPayload
  updateCounter(input: UpdateCounterInput!): UpdateCounterPayload
}

type CreateCounterPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Counter!
  clientMutationId: String
}

input CreateCounterInput {
  content: CounterInput!
  clientMutationId: String
}

input CounterInput {
  count: Int!
}

type UpdateCounterPayload {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Account currently authenticated on the Ceramic instance, if set"""
  viewer: CeramicAccount
  document: Counter!
  clientMutationId: String
}

input UpdateCounterInput {
  id: ID!
  content: PartialCounterInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PartialCounterInput {
  count: Int
}

input UpdateOptionsInput {
  """
  Fully replace the document contents instead of performing a shallow merge
  """
  replace: Boolean = false

  """Only perform mutation if the document matches the provided version"""
  version: CeramicCommitID
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID